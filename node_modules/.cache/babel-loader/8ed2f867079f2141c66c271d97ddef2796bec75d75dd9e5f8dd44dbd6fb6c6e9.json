{"ast":null,"code":"var _jsxFileName = \"/Users/wei/Documents/experiments/atomic-exec/src/App.js\",\n  _s = $RefreshSig$();\n/* global webkitSpeechRecognition */\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [audioData, setAudioData] = useState('');\n  const [transcription, setTranscription] = useState('');\n  const [accuracy, setAccuracy] = useState(0);\n  const recognition = new webkitSpeechRecognition();\n\n  // Handle file select event\n  const handleFileSelect = event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const audioData = reader.result;\n        setAudioData(audioData);\n        recognizeAudio(audioData);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Start speech recognition\n  const recognizeAudio = audioData => {\n    const audio = new Audio(audioData);\n    audio.addEventListener('canplaythrough', () => {\n      recognition.start();\n    });\n  };\n\n  // Handle recognition result\n  recognition.onresult = event => {\n    const result = event.results[0][0].transcript;\n    setTranscription(result);\n    checkAccuracy(result);\n  };\n\n  // Calculate accuracy\n  const checkAccuracy = userTranscription => {\n    // Compare the user's transcription with the correct answer, calculate accuracy, and set the state\n    // Here, we assume the correct answer is \"example transcription\" for demonstration purposes\n    const correctTranscription = 'example transcription';\n    const calculatedAccuracy = calculateAccuracy(userTranscription, correctTranscription);\n    setAccuracy(calculatedAccuracy);\n  };\n  const calculateAccuracy = (userTranscription, correctTranscription) => {\n    const userWords = userTranscription.trim().split(' ');\n    const correctWords = correctTranscription.trim().split(' ');\n    const wordCount = correctWords.length;\n    let correctCount = 0;\n    for (let i = 0; i < wordCount; i++) {\n      if (userWords[i] && userWords[i] === correctWords[i]) {\n        correctCount++;\n      }\n    }\n    return correctCount / wordCount * 100;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u807D\\u5BEB\\u7DB2\\u9801\\u61C9\\u7528\\u7A0B\\u5F0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: audioData && /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: audioData,\n        type: \"audio/mpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: transcription,\n      onChange: e => setTranscription(e.target.value),\n      rows: 4,\n      cols: 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => checkAccuracy(transcription),\n      children: \"\\u6AA2\\u67E5\\u6B63\\u78BA\\u7387\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u6B63\\u78BA\\u7387: \", accuracy, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"jRuWELuU3GvKI31YMKG8FaTI4PA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","audioData","setAudioData","transcription","setTranscription","accuracy","setAccuracy","recognition","webkitSpeechRecognition","handleFileSelect","event","_event$target$files","file","target","files","reader","FileReader","onload","result","recognizeAudio","readAsDataURL","audio","Audio","addEventListener","start","onresult","results","transcript","checkAccuracy","userTranscription","correctTranscription","calculatedAccuracy","calculateAccuracy","userWords","trim","split","correctWords","wordCount","length","correctCount","i","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","controls","src","value","e","rows","cols","onClick","_c","$RefreshReg$"],"sources":["/Users/wei/Documents/experiments/atomic-exec/src/App.js"],"sourcesContent":["/* global webkitSpeechRecognition */\nimport React, { useState } from 'react';\n\nconst App = () => {\n  const [audioData, setAudioData] = useState('');\n  const [transcription, setTranscription] = useState('');\n  const [accuracy, setAccuracy] = useState(0);\n  const recognition = new webkitSpeechRecognition();\n\n  // Handle file select event\n  const handleFileSelect = (event) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const audioData = reader.result;\n        setAudioData(audioData);\n        recognizeAudio(audioData);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Start speech recognition\n  const recognizeAudio = (audioData) => {\n    const audio = new Audio(audioData);\n    audio.addEventListener('canplaythrough', () => {\n      recognition.start();\n    });\n  };\n\n  // Handle recognition result\n  recognition.onresult = (event) => {\n    const result = event.results[0][0].transcript;\n    setTranscription(result);\n    checkAccuracy(result);\n  };\n\n  // Calculate accuracy\n  const checkAccuracy = (userTranscription) => {\n    // Compare the user's transcription with the correct answer, calculate accuracy, and set the state\n    // Here, we assume the correct answer is \"example transcription\" for demonstration purposes\n    const correctTranscription = 'example transcription';\n    const calculatedAccuracy = calculateAccuracy(userTranscription, correctTranscription);\n    setAccuracy(calculatedAccuracy);\n  };\n\n  const calculateAccuracy = (userTranscription, correctTranscription) => {\n    const userWords = userTranscription.trim().split(' ');\n    const correctWords = correctTranscription.trim().split(' ');\n    const wordCount = correctWords.length;\n    let correctCount = 0;\n\n    for (let i = 0; i < wordCount; i++) {\n      if (userWords[i] && userWords[i] === correctWords[i]) {\n        correctCount++;\n      }\n    }\n\n    return (correctCount / wordCount) * 100;\n  };\n\n  return (\n    <div>\n      <h1>聽寫網頁應用程式</h1>\n      <input type=\"file\" onChange={handleFileSelect} />\n      <div>{audioData && <audio controls src={audioData} type=\"audio/mpeg\" />}</div>\n      <textarea value={transcription} onChange={(e) => setTranscription(e.target.value)} rows={4} cols={50}></textarea>\n      <button onClick={() => checkAccuracy(transcription)}>檢查正確率</button>\n      <p>正確率: {accuracy}%</p>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}